0:geom_segment(aes(x = -0.21, xend = -0.21, # specifying the vertical arrow
0:y = arrow_start,
0:yend = arrow_end),
0:arrow = arrow(length = unit(0.3,"cm")),
0:linewidth = 1, colour = "black") +
0:geom_segment(aes(x = -1, xend = -1,
0:y = -Inf,
0:yend = Inf), alpha = divider_alpha, size = 1) +
0:scale_y_continuous(breaks = seq(lower_lim + 1.5, # breaks where the y-axis labels will be
0:upper_lim - 1.5,
0:by = 7),
0:labels = c(),
0:trans = axis_transform) + # y-axis labels
0:my_theme()
0:assign(value = g, envir = .GlobalEnv, paste0("g",
0:substr(pos, 1, 1),
0:substr(orientation, 1, 1)))
0:}
0:# run the above function for every combination of conditions
0:invisible(do.call(mapply, c(create_plot, unname(id))))
0:# add all four plots together, with addition y-axis labels
0:c1 <- ghc + labs(title = 'Conventional', subtitle = 'Axis Orientation') + glc + plot_layout(ncol=1)
0:ggsave("c1.png")
0:c2 <- ghi + labs(title = 'Inverted', subtitle = 'Axis Orientation') + gli + plot_layout(ncol=1)
0:ggsave("c2.png")
0:# create my theme
0:my_theme <- function() {
0:theme_minimal(base_size = 12) +
0:theme(plot.background = element_rect(fill = "white"),
0:panel.border = element_rect(fill = "NA", linewidth = 0),
0:panel.grid.minor = element_blank(),
0:panel.grid.major = element_blank(),
0:axis.title.x = element_blank(),
0:axis.text.x = element_blank(),
0:axis.ticks.x = element_blank(),
0:axis.title.y = element_text(size = 12, face = "bold"),
0:axis.text.y = element_text(size = 12, colour = "black", face = "bold"),
0:plot.title = element_text(face = "bold"),
0:aspect.ratio = 1.5,
0:)
0:}
0:# generate example data
0:x <- c('A','B','C')
0:y <- c(38, 38.2, 37.8)
0:df <- as_tibble(cbind(x, y)) %>%
0:mutate_at(vars("y"), as.numeric)
0:data_mean <- 38
0:# dataframe with four possible combinations of conditions
0:id <- expand_grid(c("hi", "lo"), c("conventional", "inverted"))
0:create_plot <- function(pos, orientation){
0:# set upper and lower limits around the population mean of the data, depending on conditions
0:lower_lim <- case_when(pos == "lo" & orientation == "conventional" ~ data_mean - 1.5,
0:pos == "hi" & orientation == "conventional" ~ data_mean - 8.5,
0:pos == "lo" & orientation == "inverted" ~ data_mean - 8.5,
0:pos == "hi" & orientation == "inverted" ~ data_mean - 1.5)
0:upper_lim <- case_when(pos == "lo" & orientation == "conventional" ~ data_mean + 8.5,
0:pos == "hi" & orientation == "conventional" ~ data_mean + 1.5,
0:pos == "lo" & orientation == "inverted" ~ data_mean + 1.5,
0:pos == "hi" & orientation == "inverted" ~ data_mean + 8.5)
0:# set the values for other variables
0:# y_order = the order for the two y-axis value labels (bottom, top)
0:y_order <- case_when(orientation == "conventional" ~ c(lower_lim, upper_lim),
0:orientation == "inverted" ~ c(upper_lim, lower_lim))
0:# axis_transform = reverse axis or not
0:axis_transform <- case_when(orientation == "conventional" ~ "identity",
0:orientation == "inverted" ~ "reverse")
0:# background colour
0:fill_colour <- case_when(orientation == "conventional" ~ "white",
0:orientation == "inverted" ~ "grey")
0:# opacity of dividing line
0:divider_alpha <- case_when(orientation == "conventional" ~ 0,
0:orientation == "inverted" ~ 0)
0:# text which states whether values are higher or lower than implied alternatives
0:comparison_text <- case_when(pos == "lo" & orientation == "conventional" ~ "LOW",
0:pos == "hi" & orientation == "conventional" ~ "HIGH",
0:pos == "lo" & orientation == "inverted" ~ "HIGH",
0:pos == "hi" & orientation == "inverted" ~ "LOW")
0:# position of comparison text in between data points and farthest limits
0:text_pos <- min(upper_lim, lower_lim) +
0:(max(upper_lim, lower_lim) - min(upper_lim, lower_lim))/2
0:# start and end points for direction arrow at the side
0:arrow_start <- lower_lim +2.5
0:arrow_end <- upper_lim -2.5
0:# create the plot
0:g <- df %>% ggplot(aes(x = x,
0:y = y)) +
0:geom_point(size = 4) +
0:ylab("") +
0:coord_cartesian(ylim = y_order,
0:xlim = c(0.5, 3.5),
0:clip = "off",
0:expand = FALSE) +
0:geom_segment(aes(x = -0.21, xend = -0.21, # specifying the vertical arrow
0:y = arrow_start,
0:yend = arrow_end),
0:arrow = arrow(length = unit(0.3,"cm")),
0:linewidth = 1, colour = "black") +
0:geom_segment(aes(x = -1, xend = -1,
0:y = -Inf,
0:yend = Inf), alpha = divider_alpha, size = 1) +
0:scale_y_continuous(breaks = seq(lower_lim + 1.5, # breaks where the y-axis labels will be
0:upper_lim - 1.5,
0:by = 7),
0:labels = c(),
0:trans = axis_transform) + # y-axis labels
0:my_theme()
0:assign(value = g, envir = .GlobalEnv, paste0("g",
0:substr(pos, 1, 1),
0:substr(orientation, 1, 1)))
0:}
0:# run the above function for every combination of conditions
0:invisible(do.call(mapply, c(create_plot, unname(id))))
0:# add all four plots together, with addition y-axis labels
0:c1 <- ghc + labs(title = 'Conventional', subtitle = 'Axis Orientation') + glc + plot_layout(ncol=1)
0:ggsave("c1.png")
0:c2 <- ghi + labs(title = 'Inverted', subtitle = 'Axis Orientation') + gli + plot_layout(ncol=1)
0:ggsave("c2.png")
0:# create my theme
0:my_theme <- function() {
0:theme_minimal(base_size = 12) +
0:theme(#plot.background = element_rect(fill = "white"),
0:panel.border = element_rect(fill = "NA", linewidth = 0),
0:panel.grid.minor = element_blank(),
0:panel.grid.major = element_blank(),
0:axis.title.x = element_blank(),
0:axis.text.x = element_blank(),
0:axis.ticks.x = element_blank(),
0:axis.title.y = element_text(size = 12, face = "bold"),
0:axis.text.y = element_text(size = 12, colour = "black", face = "bold"),
0:plot.title = element_text(face = "bold"),
0:aspect.ratio = 1.5,
0:)
0:}
0:# generate example data
0:x <- c('A','B','C')
0:y <- c(38, 38.2, 37.8)
0:df <- as_tibble(cbind(x, y)) %>%
0:mutate_at(vars("y"), as.numeric)
0:data_mean <- 38
0:# dataframe with four possible combinations of conditions
0:id <- expand_grid(c("hi", "lo"), c("conventional", "inverted"))
0:create_plot <- function(pos, orientation){
0:# set upper and lower limits around the population mean of the data, depending on conditions
0:lower_lim <- case_when(pos == "lo" & orientation == "conventional" ~ data_mean - 1.5,
0:pos == "hi" & orientation == "conventional" ~ data_mean - 8.5,
0:pos == "lo" & orientation == "inverted" ~ data_mean - 8.5,
0:pos == "hi" & orientation == "inverted" ~ data_mean - 1.5)
0:upper_lim <- case_when(pos == "lo" & orientation == "conventional" ~ data_mean + 8.5,
0:pos == "hi" & orientation == "conventional" ~ data_mean + 1.5,
0:pos == "lo" & orientation == "inverted" ~ data_mean + 1.5,
0:pos == "hi" & orientation == "inverted" ~ data_mean + 8.5)
0:# set the values for other variables
0:# y_order = the order for the two y-axis value labels (bottom, top)
0:y_order <- case_when(orientation == "conventional" ~ c(lower_lim, upper_lim),
0:orientation == "inverted" ~ c(upper_lim, lower_lim))
0:# axis_transform = reverse axis or not
0:axis_transform <- case_when(orientation == "conventional" ~ "identity",
0:orientation == "inverted" ~ "reverse")
0:# background colour
0:fill_colour <- case_when(orientation == "conventional" ~ "white",
0:orientation == "inverted" ~ "grey")
0:# opacity of dividing line
0:divider_alpha <- case_when(orientation == "conventional" ~ 0,
0:orientation == "inverted" ~ 0)
0:# text which states whether values are higher or lower than implied alternatives
0:comparison_text <- case_when(pos == "lo" & orientation == "conventional" ~ "LOW",
0:pos == "hi" & orientation == "conventional" ~ "HIGH",
0:pos == "lo" & orientation == "inverted" ~ "HIGH",
0:pos == "hi" & orientation == "inverted" ~ "LOW")
0:# position of comparison text in between data points and farthest limits
0:text_pos <- min(upper_lim, lower_lim) +
0:(max(upper_lim, lower_lim) - min(upper_lim, lower_lim))/2
0:# start and end points for direction arrow at the side
0:arrow_start <- lower_lim +2.5
0:arrow_end <- upper_lim -2.5
0:# create the plot
0:g <- df %>% ggplot(aes(x = x,
0:y = y)) +
0:geom_point(size = 4) +
0:ylab("") +
0:coord_cartesian(ylim = y_order,
0:xlim = c(0.5, 3.5),
0:clip = "off",
0:expand = FALSE) +
0:geom_segment(aes(x = -0.21, xend = -0.21, # specifying the vertical arrow
0:y = arrow_start,
0:yend = arrow_end),
0:arrow = arrow(length = unit(0.3,"cm")),
0:linewidth = 1, colour = "black") +
0:geom_segment(aes(x = -1, xend = -1,
0:y = -Inf,
0:yend = Inf), alpha = divider_alpha, size = 1) +
0:scale_y_continuous(breaks = seq(lower_lim + 1.5, # breaks where the y-axis labels will be
0:upper_lim - 1.5,
0:by = 7),
0:labels = c(),
0:trans = axis_transform) + # y-axis labels
0:my_theme()
0:assign(value = g, envir = .GlobalEnv, paste0("g",
0:substr(pos, 1, 1),
0:substr(orientation, 1, 1)))
0:}
0:# run the above function for every combination of conditions
0:invisible(do.call(mapply, c(create_plot, unname(id))))
0:# add all four plots together, with addition y-axis labels
0:c1 <- ghc + labs(title = 'Conventional', subtitle = 'Axis Orientation') + glc + plot_layout(ncol=1)
0:ggsave("c1.png")
0:c2 <- ghi + labs(title = 'Inverted', subtitle = 'Axis Orientation') + gli + plot_layout(ncol=1)
0:ggsave("c2.png")
0:# create my theme
0:my_theme <- function() {
0:theme_minimal(base_size = 12) +
0:theme(plot.background = element_rect(fill = "white"),
0:panel.border = element_rect(fill = NA, linewidth = 1),
0:panel.grid.minor = element_blank(),
0:panel.grid.major = element_blank(),
0:axis.title.x = element_blank(),
0:axis.text.x = element_blank(),
0:axis.ticks.x = element_blank(),
0:axis.title.y = element_text(size = 12, face = "bold"),
0:axis.text.y = element_text(size = 12, colour = "black", face = "bold"),
0:plot.title = element_text(face = "bold"),
0:aspect.ratio = 1.5,
0:)
0:}
0:# generate example data
0:x <- c('A','B','C')
0:y <- c(38, 38.2, 37.8)
0:df <- as_tibble(cbind(x, y)) %>%
0:mutate_at(vars("y"), as.numeric)
0:data_mean <- 38
0:# dataframe with four possible combinations of conditions
0:id <- expand_grid(c("hi", "lo"), c("conventional", "inverted"))
0:create_plot <- function(pos, orientation){
0:# set upper and lower limits around the population mean of the data, depending on conditions
0:lower_lim <- case_when(pos == "lo" & orientation == "conventional" ~ data_mean - 1.5,
0:pos == "hi" & orientation == "conventional" ~ data_mean - 8.5,
0:pos == "lo" & orientation == "inverted" ~ data_mean - 8.5,
0:pos == "hi" & orientation == "inverted" ~ data_mean - 1.5)
0:upper_lim <- case_when(pos == "lo" & orientation == "conventional" ~ data_mean + 8.5,
0:pos == "hi" & orientation == "conventional" ~ data_mean + 1.5,
0:pos == "lo" & orientation == "inverted" ~ data_mean + 1.5,
0:pos == "hi" & orientation == "inverted" ~ data_mean + 8.5)
0:# set the values for other variables
0:# y_order = the order for the two y-axis value labels (bottom, top)
0:y_order <- case_when(orientation == "conventional" ~ c(lower_lim, upper_lim),
0:orientation == "inverted" ~ c(upper_lim, lower_lim))
0:# axis_transform = reverse axis or not
0:axis_transform <- case_when(orientation == "conventional" ~ "identity",
0:orientation == "inverted" ~ "reverse")
0:# background colour
0:fill_colour <- case_when(orientation == "conventional" ~ "white",
0:orientation == "inverted" ~ "grey")
0:# opacity of dividing line
0:divider_alpha <- case_when(orientation == "conventional" ~ 0,
0:orientation == "inverted" ~ 0)
0:# text which states whether values are higher or lower than implied alternatives
0:comparison_text <- case_when(pos == "lo" & orientation == "conventional" ~ "LOW",
0:pos == "hi" & orientation == "conventional" ~ "HIGH",
0:pos == "lo" & orientation == "inverted" ~ "HIGH",
0:pos == "hi" & orientation == "inverted" ~ "LOW")
0:# position of comparison text in between data points and farthest limits
0:text_pos <- min(upper_lim, lower_lim) +
0:(max(upper_lim, lower_lim) - min(upper_lim, lower_lim))/2
0:# start and end points for direction arrow at the side
0:arrow_start <- lower_lim +2.5
0:arrow_end <- upper_lim -2.5
0:# create the plot
0:g <- df %>% ggplot(aes(x = x,
0:y = y)) +
0:geom_point(size = 4) +
0:ylab("") +
0:coord_cartesian(ylim = y_order,
0:xlim = c(0.5, 3.5),
0:clip = "off",
0:expand = FALSE) +
0:geom_segment(aes(x = -0.21, xend = -0.21, # specifying the vertical arrow
0:y = arrow_start,
0:yend = arrow_end),
0:arrow = arrow(length = unit(0.3,"cm")),
0:linewidth = 1, colour = "black") +
0:geom_segment(aes(x = -1, xend = -1,
0:y = -Inf,
0:yend = Inf), alpha = divider_alpha, size = 1) +
0:scale_y_continuous(breaks = seq(lower_lim + 1.5, # breaks where the y-axis labels will be
0:upper_lim - 1.5,
0:by = 7),
0:labels = c(),
0:trans = axis_transform) + # y-axis labels
0:my_theme()
0:assign(value = g, envir = .GlobalEnv, paste0("g",
0:substr(pos, 1, 1),
0:substr(orientation, 1, 1)))
0:}
0:# run the above function for every combination of conditions
0:invisible(do.call(mapply, c(create_plot, unname(id))))
0:# add all four plots together, with addition y-axis labels
0:c1 <- ghc + labs(title = 'Conventional', subtitle = 'Axis Orientation') + glc + plot_layout(ncol=1)
0:ggsave("c1.png")
0:c2 <- ghi + labs(title = 'Inverted', subtitle = 'Axis Orientation') + gli + plot_layout(ncol=1)
0:# create my theme
0:my_theme <- function() {
0:theme_minimal(base_size = 12) +
0:theme(
0:panel.border = element_rect(fill = NA, linewidth = 1),
0:plot.background = element_rect(fill = "white"),
0:panel.grid.minor = element_blank(),
0:panel.grid.major = element_blank(),
0:axis.title.x = element_blank(),
0:axis.text.x = element_blank(),
0:axis.ticks.x = element_blank(),
0:axis.title.y = element_text(size = 12, face = "bold"),
0:axis.text.y = element_text(size = 12, colour = "black", face = "bold"),
0:plot.title = element_text(face = "bold"),
0:aspect.ratio = 1.5,
0:)
0:}
0:# generate example data
0:x <- c('A','B','C')
0:y <- c(38, 38.2, 37.8)
0:df <- as_tibble(cbind(x, y)) %>%
0:mutate_at(vars("y"), as.numeric)
0:data_mean <- 38
0:# dataframe with four possible combinations of conditions
0:id <- expand_grid(c("hi", "lo"), c("conventional", "inverted"))
0:create_plot <- function(pos, orientation){
0:# set upper and lower limits around the population mean of the data, depending on conditions
0:lower_lim <- case_when(pos == "lo" & orientation == "conventional" ~ data_mean - 1.5,
0:pos == "hi" & orientation == "conventional" ~ data_mean - 8.5,
0:pos == "lo" & orientation == "inverted" ~ data_mean - 8.5,
0:pos == "hi" & orientation == "inverted" ~ data_mean - 1.5)
0:upper_lim <- case_when(pos == "lo" & orientation == "conventional" ~ data_mean + 8.5,
0:pos == "hi" & orientation == "conventional" ~ data_mean + 1.5,
0:pos == "lo" & orientation == "inverted" ~ data_mean + 1.5,
0:pos == "hi" & orientation == "inverted" ~ data_mean + 8.5)
0:# set the values for other variables
0:# y_order = the order for the two y-axis value labels (bottom, top)
0:y_order <- case_when(orientation == "conventional" ~ c(lower_lim, upper_lim),
0:orientation == "inverted" ~ c(upper_lim, lower_lim))
0:# axis_transform = reverse axis or not
0:axis_transform <- case_when(orientation == "conventional" ~ "identity",
0:orientation == "inverted" ~ "reverse")
0:# background colour
0:fill_colour <- case_when(orientation == "conventional" ~ "white",
0:orientation == "inverted" ~ "grey")
0:# opacity of dividing line
0:divider_alpha <- case_when(orientation == "conventional" ~ 0,
0:orientation == "inverted" ~ 0)
0:# text which states whether values are higher or lower than implied alternatives
0:comparison_text <- case_when(pos == "lo" & orientation == "conventional" ~ "LOW",
0:pos == "hi" & orientation == "conventional" ~ "HIGH",
0:pos == "lo" & orientation == "inverted" ~ "HIGH",
0:pos == "hi" & orientation == "inverted" ~ "LOW")
0:# position of comparison text in between data points and farthest limits
0:text_pos <- min(upper_lim, lower_lim) +
0:(max(upper_lim, lower_lim) - min(upper_lim, lower_lim))/2
0:# start and end points for direction arrow at the side
0:arrow_start <- lower_lim +2.5
0:arrow_end <- upper_lim -2.5
0:# create the plot
0:g <- df %>% ggplot(aes(x = x,
0:y = y)) +
0:geom_point(size = 4) +
0:ylab("") +
0:coord_cartesian(ylim = y_order,
0:xlim = c(0.5, 3.5),
0:clip = "off",
0:expand = FALSE) +
0:geom_segment(aes(x = -0.21, xend = -0.21, # specifying the vertical arrow
0:y = arrow_start,
0:yend = arrow_end),
0:arrow = arrow(length = unit(0.3,"cm")),
0:linewidth = 1, colour = "black") +
0:geom_segment(aes(x = -1, xend = -1,
0:y = -Inf,
0:yend = Inf), alpha = divider_alpha, size = 1) +
0:scale_y_continuous(breaks = seq(lower_lim + 1.5, # breaks where the y-axis labels will be
0:upper_lim - 1.5,
0:by = 7),
0:labels = c(),
0:trans = axis_transform) + # y-axis labels
0:my_theme()
0:assign(value = g, envir = .GlobalEnv, paste0("g",
0:substr(pos, 1, 1),
0:substr(orientation, 1, 1)))
0:}
0:# run the above function for every combination of conditions
0:invisible(do.call(mapply, c(create_plot, unname(id))))
0:# add all four plots together, with addition y-axis labels
0:c1 <- ghc + labs(title = 'Conventional', subtitle = 'Axis Orientation') + glc + plot_layout(ncol=1)
0:ggsave("c1.png")
0:c2 <- ghi + labs(title = 'Inverted', subtitle = 'Axis Orientation') + gli + plot_layout(ncol=1)
0:c
0:c1
0:# create my theme
0:my_theme <- function() {
0:theme_minimal(base_size = 12) +
0:theme(plot.background = element_rect(fill = "white", linewidth = 0),
0:panel.border = element_rect(fill = NA, linewidth = 1),
0:panel.grid.minor = element_blank(),
0:panel.grid.major = element_blank(),
0:axis.title.x = element_blank(),
0:axis.text.x = element_blank(),
0:axis.ticks.x = element_blank(),
0:axis.title.y = element_text(size = 12, face = "bold"),
0:axis.text.y = element_text(size = 12, colour = "black", face = "bold"),
0:plot.title = element_text(face = "bold"),
0:aspect.ratio = 1.5,
0:)
0:}
0:# generate example data
0:x <- c('A','B','C')
0:y <- c(38, 38.2, 37.8)
0:df <- as_tibble(cbind(x, y)) %>%
0:mutate_at(vars("y"), as.numeric)
0:data_mean <- 38
0:# dataframe with four possible combinations of conditions
0:id <- expand_grid(c("hi", "lo"), c("conventional", "inverted"))
0:create_plot <- function(pos, orientation){
0:# set upper and lower limits around the population mean of the data, depending on conditions
0:lower_lim <- case_when(pos == "lo" & orientation == "conventional" ~ data_mean - 1.5,
0:pos == "hi" & orientation == "conventional" ~ data_mean - 8.5,
0:pos == "lo" & orientation == "inverted" ~ data_mean - 8.5,
0:pos == "hi" & orientation == "inverted" ~ data_mean - 1.5)
0:upper_lim <- case_when(pos == "lo" & orientation == "conventional" ~ data_mean + 8.5,
0:pos == "hi" & orientation == "conventional" ~ data_mean + 1.5,
0:pos == "lo" & orientation == "inverted" ~ data_mean + 1.5,
0:pos == "hi" & orientation == "inverted" ~ data_mean + 8.5)
0:# set the values for other variables
0:# y_order = the order for the two y-axis value labels (bottom, top)
0:y_order <- case_when(orientation == "conventional" ~ c(lower_lim, upper_lim),
0:orientation == "inverted" ~ c(upper_lim, lower_lim))
0:# axis_transform = reverse axis or not
0:axis_transform <- case_when(orientation == "conventional" ~ "identity",
0:orientation == "inverted" ~ "reverse")
0:# background colour
0:fill_colour <- case_when(orientation == "conventional" ~ "white",
0:orientation == "inverted" ~ "grey")
0:# opacity of dividing line
0:divider_alpha <- case_when(orientation == "conventional" ~ 0,
0:orientation == "inverted" ~ 0)
0:# text which states whether values are higher or lower than implied alternatives
0:comparison_text <- case_when(pos == "lo" & orientation == "conventional" ~ "LOW",
0:pos == "hi" & orientation == "conventional" ~ "HIGH",
0:pos == "lo" & orientation == "inverted" ~ "HIGH",
0:pos == "hi" & orientation == "inverted" ~ "LOW")
0:# position of comparison text in between data points and farthest limits
0:text_pos <- min(upper_lim, lower_lim) +
0:(max(upper_lim, lower_lim) - min(upper_lim, lower_lim))/2
0:# start and end points for direction arrow at the side
0:arrow_start <- lower_lim +2.5
0:arrow_end <- upper_lim -2.5
0:# create the plot
0:g <- df %>% ggplot(aes(x = x,
0:y = y)) +
0:geom_point(size = 4) +
0:ylab("") +
0:coord_cartesian(ylim = y_order,
0:xlim = c(0.5, 3.5),
0:clip = "off",
0:expand = FALSE) +
0:geom_segment(aes(x = -0.21, xend = -0.21, # specifying the vertical arrow
0:y = arrow_start,
0:yend = arrow_end),
0:arrow = arrow(length = unit(0.3,"cm")),
0:linewidth = 1, colour = "black") +
0:geom_segment(aes(x = -1, xend = -1,
0:y = -Inf,
0:yend = Inf), alpha = divider_alpha, size = 1) +
0:scale_y_continuous(breaks = seq(lower_lim + 1.5, # breaks where the y-axis labels will be
0:upper_lim - 1.5,
0:by = 7),
0:labels = c(),
0:trans = axis_transform) + # y-axis labels
0:my_theme()
0:assign(value = g, envir = .GlobalEnv, paste0("g",
0:substr(pos, 1, 1),
0:substr(orientation, 1, 1)))
0:}
0:# run the above function for every combination of conditions
0:invisible(do.call(mapply, c(create_plot, unname(id))))
0:# add all four plots together, with addition y-axis labels
0:c1 <- ghc + labs(title = 'Conventional', subtitle = 'Axis Orientation') + glc + plot_layout(ncol=1)
0:ggsave("c1.png")
0:c2 <- ghi + labs(title = 'Inverted', subtitle = 'Axis Orientation') + gli + plot_layout(ncol=1)
0:ggsave("c2.png")
0:c1
0:c1+ c2
0:c1 | c2
0:# add all four plots together, with addition y-axis labels
0:c1 <- ghc + labs(title = 'A: Conventional', subtitle = 'Axis Orientation') + glc + plot_layout(ncol=1)
0:ggsave("c1.png")
0:c1
0:c2
0:c2 <- ghi + labs(title = 'B: Inverted', subtitle = 'Axis Orientation') + gli + plot_layout(ncol=1)
0:c2
0:# add all four plots together, with addition y-axis labels
0:c1 <- ghc + labs(title = 'Conventional', subtitle = 'Axis Orientation') + glc + plot_layout(ncol=1)
0:ggsave("c1.png")
0:c2 <- ghi + labs(title = 'Inverted', subtitle = 'Axis Orientation') + gli + plot_layout(ncol=1)
0:ggsave("c2.png")
0:c1
0:library(ordinal)
0:version(ordinal)
0:print_confint(rev(1/exp(c(3, 4))))
0:library(papaja)
0:print_confint(rev(1/exp(c(3, 4))))
0:print_confint(rev(1/exp(c(95))))
0:print_confint(rev(1/exp(c(95, 96))))
0:print_confint(rev(exp(c(95, 96))))
0:E1_c.CI
0:?print_confint
1682680105581:sessionInfo
1682680109604:sessionInfo()
1682680427999:version
